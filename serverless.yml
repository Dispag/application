service: application
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}

  environment:
    SECRET: ${self:custom.secrete.${self:provider.stage}}
    #Kafka
    KAFKA_ENABLE: 'ON'
    KAFKA_SERVER: ${self:custom.kafka_server.${self:provider.stage}}
    KAFKATOPIC_REGISTRARDEBITO: 'REGISTRARDEBITO'

    #Database
    DB_USER: ${self:custom.db_user.${self:provider.stage}}
    DB_HOST: ${self:custom.db_host.${self:provider.stage}}
    DB_NAME: ${self:custom.db_name.${self:provider.stage}}
    DB_PASSWORD: ${self:custom.db_password.${self:provider.stage}}
    DB_PORT: 5432
# you can overwrite defaults here
#  stage: dev
  region: us-east-2
  vpc:
    securityGroupIds:
      - sg-0bf048bba2ffab140
      - sg-086dbca6f18eb499e
    subnetIds:
      - subnet-0bd2b902b764ad6b1
      - subnet-07699f487086588cd
  deploymentBucket:
    name: dispagdeploy

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
    shouldStartNameWithService: true

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:DeleteObject"
            - iam:Get*
            - iam:List*
            - iam:PassRole
            - iam:CreateRole
            - iam:DeleteRole
            - iam:AttachRolePolicy
            - iam:DeleteRolePolicy
            - iam:PutRolePolicy
            - iam:TagRole
            - iam:UntagRole
          Resource: "*"

custom:
  secrete:
    dev: '#jequiladispag@$12'
    prd: ${ssm:/dispag/secrete}

  db_user:
    dev: 'programador'
    prd: ${ssm:/dispag/database/username}
  db_password:
    dev: 'hidros'
    prd: ${ssm:/dispag/database/password}
  db_name:
    dev: 'tarefas'
    prd: ${ssm:/dispag/database/name}
  db_host:
    dev: 'localhost'
    prd: ${ssm:/dispag/database/host}
  kafka_server:
    dev: '172.24.170.10:9092'
    prd: ${ssm:/dispag/kafka/server}

  serverlessPluginTypescript:
    tsConfigFileLocation: './tsconfig.build.json'
  
  #customDomain:
  #  domainName: dispag.hagemelo.io
  #  basePath: ''
  #  stage: ${self:provider.stage}
  #  endPointType: regional
  #  certificateArn: arn:aws:acm:us-east-1:644097961727:certificate/c45c5e3e-af04-4615-ac44-ea9b1c60cf55
  #  createRoute53Record: true
  #  enabled: true
  #  autoDomain: true
  #  apiType: rest


package:
  exclude:
    - .git/**
    - src/**
    - test/**
    - e2e/**
    - nodemon.json
    - README.md


functions:
  authenticator:
      name: authenticator
      handler: .build/handlers/authenticator-handler.handler
      events:
          - http:
              method: post
              path: auth/login

  authorizer:
      memorySize: 256
      timeout: 10
      handler: .build/handlers/authenticator-handler.authorizer

  registrardebito:
      memorySize: 256
      timeout: 10
      handler: .build/handlers/command-registrar-debito-handler.handler
      events:
          - http:
              method: post
              path: registrar/debito
              authorizer: 
                type: token 
                name: authorizer
                resultTtlInSeconds: 300 
                identitySource: method.request.header.Authorization 

plugins:
  - serverless-domain-manager
  - serverless-offline
  #- serverless-dotenv-plugin
     

